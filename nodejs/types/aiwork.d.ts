import Client from "./client";
export default class AiWorkClass extends Client {
    constructor();
    hello(): string;
    getWorklist(doer: string, arg1?: any, arg2?: any): Promise<any>;
    createTemplate(tplid: string, desc?: string): Promise<any>;
    putTemplate(tpl_data: string, tplid: string, desc?: string): Promise<any>;
    importTemplateXML(tplid: string, fileObj: any): Promise<import("axios").AxiosResponse<any, any> | undefined>;
    readTemplate(tpl_id: string): Promise<any>;
    readWorkflow(wfid: string): Promise<any>;
    exportTemplate(tpl_id: string): Promise<void>;
    listTemplate(): Promise<any>;
    renameTemplateWithIid(_id: string, tplid: string): Promise<any>;
    renameTemplate(fromid: string, tplid: string): Promise<any>;
    deleteTemplate(_id: string): Promise<any>;
    deleteTemplateByTplid(tplid: string): Promise<any>;
    makeCopyOfTemplate(_id: string): Promise<any>;
    copyTemplateTo(fromid: string, tplid: string): Promise<any>;
    getPbo(wfid: string, pbotype?: string): Promise<any>;
    setPbo(wfid: string, pbo: string, pbotype: string, stepid: string): Promise<any>;
    startWorkflow(tplid: string, wfid?: string, teamid?: string, pbo?: string, kvars?: {}): Promise<any>;
    opWorkflow(wfid: string, op: string): Promise<any>;
    pauseWorkflow(wfid: string): Promise<any>;
    resumeWorkflow(wfid: string): Promise<any>;
    stopWorkflow(wfid: string): Promise<any>;
    workflowSearch(filter: Record<string, any>): Promise<any>;
    workflowGetLatest(filter: Record<string, any>): Promise<any>;
    destroyWorkflow(wfid: string): Promise<any>;
    destroyMultiWorkflows(wfids: string[]): Promise<any>;
    destroyWorkflowByWfTitle(wftitle: string): Promise<any>;
    destroyWorkflowByTplid(tplid: string): Promise<any>;
    doWork(doer: string, todoid: string, kvars?: {}, route?: string): Promise<any>;
    doWorkByNode(doer: string, wfid: string, nodeid: string, kvars?: {}, route?: string): Promise<any>;
    getKVars(wfid: string, workid: string): Promise<any>;
    getStatus(wfid: string, todoid?: string | undefined): Promise<string>;
    revoke(wfid: string, todoid: string, comment?: string): Promise<any>;
    sendback(doer: string, wfid: string, todoid: string, kvars?: {}): Promise<any>;
    getWorkInfo(todoid: string): Promise<any>;
    uploadTeam(name: string, tmap: string): Promise<any>;
    setRole(teamid: string, role: string, members: string[]): Promise<any>;
    addRoleMembers(teamid: string, role: string, members: string[]): Promise<any>;
    deleteRoleMembers(teamid: string, role: string, members: string[]): Promise<any>;
    copyRole(teamid: string, role: string, newrole: string): Promise<any>;
    importTeamCSV(teamid: string, fileObj: any): Promise<import("axios").AxiosResponse<any, any> | undefined>;
    getTeamFullInfo(teamid: string): Promise<any>;
    getTeamList(payload: Record<string, any>): Promise<any>;
    getCallbackPoints(cbpFilter: Record<string, any>): Promise<any>;
    getLatestCallbackPoint(cbpFilter: Record<string, any>): Promise<any>;
    doCallback(cbpid: string, decision: string, kvars: any, atts: any): Promise<any>;
    deleteTeam(name: string): Promise<any>;
    __checkError(ret: any): void;
    register(account: string, username: string, password: string): Promise<any>;
    verify(token: string): Promise<any>;
    removeUser(account: string, site_passwd: string): Promise<any>;
    login(account: any, password: string): Promise<any>;
    setUserName(username: string): Promise<any>;
    setUserPassword(oldpassword: string, password: string): Promise<any>;
    getSessionToken(): string | null;
    setSessionToken(token: string): void;
    profile(): Promise<any>;
    logout(token: string): Promise<any>;
    adminSetVerified(userids: any): Promise<any>;
    mySetVerified(): Promise<any>;
    orgJoinCodeNew(): Promise<any>;
    orgJoin(joincode: string): Promise<any>;
    orgClearJoinApplications(): Promise<any>;
    orgSetRegfree(regfree: boolean): Promise<any>;
    orgMyOrg(): Promise<any>;
    orgMyOrgSetOrgmode(orgmode: boolean, password: string): Promise<any>;
    orgApprove(account_eids: string[]): Promise<any>;
    orgSetEmployeeGroup(eids: string[], group: string): Promise<any>;
    orgGetEmployees(payload: Record<string, any>): Promise<any>;
    myPerm(what: string, op: string, instance_id?: undefined): Promise<any>;
    employeePerm(eid: string, what: string, op: string, instance_id?: undefined): Promise<any>;
    getLeaderWithinOrgchart(param: any): Promise<any>;
    getStaffWithinOrgchart(param: any): Promise<any>;
    importFromExcel(param: any): Promise<any>;
    listOrgchart(param: any): Promise<any>;
    listOrgchartOU(param: any): Promise<any>;
}
